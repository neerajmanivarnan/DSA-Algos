/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;

        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);
        int depth = 1;

        while(!q.isEmpty()){
            int size =  q.size();
            

            for(int i=0;i<size;i++){
                TreeNode currentNode = q.poll();
                if(currentNode.left == null && currentNode.right == null) return depth;

                if(currentNode.left!=null) q.offer(currentNode.left);
                if(currentNode.right!=null) q.offer(currentNode.right);
            }

            depth++;

        }

        return depth;

    }
}
